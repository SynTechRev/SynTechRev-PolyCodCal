{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Documentation Index","text":""},{"location":"#documentation-overview","title":"\ud83d\udcda Documentation Overview","text":"<p>Welcome to the SynTechRev documentation.</p> <p>This site contains: - Project overview and design rationale - Installation instructions and CLI quickstart - API reference and developer guides</p>"},{"location":"#install-pre-release","title":"Install (pre-release)","text":"<p>Replace  with the package name you publish on PyPI (example: syntechrev-polycodcal). <pre><code># Example (replace with actual package name)\npip install syntechrev-polycodcal\n</code></pre>"},{"location":"#cli-quickstart","title":"CLI Quickstart","text":"<p>Three console entry points are provided:</p> <ul> <li><code>syntech-monitor --help</code></li> <li><code>genesis-gateway --help</code></li> <li><code>legal-generator --help</code></li> </ul> <p>Example usage:</p> <pre><code># Show help for each command\nsyntech-monitor --help\ngenesis-gateway --help\nlegal-generator --help\n</code></pre>"},{"location":"#contributing-local-development","title":"Contributing &amp; Local Development","text":"<p>To build locally and run tests:</p> <pre><code>python -m build\npip install --upgrade build twine\npython -m venv .venv\n.\\.venv\\Scripts\\Activate.ps1   # Windows PowerShell\npip install -e \".[dev]\"\nflake8 .\npytest\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>GETTING_STARTED.md - Complete setup guide (RECOMMENDED)</li> <li>Installation and setup</li> <li>VS Code configuration with PYTHONPATH</li> <li>GitHub Copilot integration</li> <li>Troubleshooting common issues</li> <li> <p>First contribution guide</p> </li> <li> <p>QUICKSTART.md - Alternative 5-minute setup guide</p> </li> <li>Quick installation</li> <li>First test run</li> <li> <p>Basic VS Code setup</p> </li> <li> <p>ENVIRONMENT_RESET.md - Environment reset and troubleshooting</p> </li> <li>Clean up and reset procedures</li> <li>VSCode integration fixes</li> <li>Cross-platform compatibility</li> <li>GitHub sync procedures</li> <li> <p>Advanced troubleshooting</p> </li> <li> <p>VSCODE_TAGGING.md - VS Code tagging quick reference</p> </li> <li>Common tagging issues and solutions</li> <li>VS Code-specific workflows</li> <li>Authentication troubleshooting</li> <li> <p>Quick reference for releases</p> </li> <li> <p>README.md - Project overview</p> </li> <li>What is SynTechRev-PolyCodCal</li> <li>FeedbackMonitor usage examples</li> <li>Project structure</li> <li>Quick reference</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<ul> <li>CONTRIBUTING.md - Comprehensive contribution guide</li> <li>Development workflow</li> <li>Code standards</li> <li>Testing requirements</li> <li>Pull request process</li> <li> <p>Code review guidelines</p> </li> <li> <p>DEVELOPMENT_WORKFLOW.md - Visual workflow guide</p> </li> <li>Step-by-step development process</li> <li>Diagrams and flowcharts</li> <li>Common scenarios</li> <li>Best practices</li> <li>Troubleshooting</li> </ul>"},{"location":"#code-quality","title":"Code Quality","text":"<ul> <li>CODE_REPAIR_STRATEGY.md - Systematic code repair approach</li> <li>Assessment methodology</li> <li>Prioritization framework</li> <li>Repair process</li> <li>Verification steps</li> <li>Best practices</li> <li> <p>Common issues and solutions</p> </li> <li> <p>PHASE7_READINESS.md - Phase 7 readiness report</p> </li> <li>Prerequisites checklist</li> <li>Packaging infrastructure status</li> <li>Console scripts verification</li> <li>Test results and quality checks</li> <li>Implementation roadmap</li> <li> <p>Success criteria</p> </li> <li> <p>PHASE7_KICKOFF.md - Phase 7 kickoff and scope</p> </li> <li>Goal and deliverables</li> <li>Acceptance criteria</li> <li>Implementation tasks</li> <li>Constraints and risks</li> <li> <p>Definition of done</p> </li> <li> <p>TAGGING_GUIDE.md - Repository tagging and release guide</p> </li> <li>Creating release tags</li> <li>Repository cleanup procedures</li> <li>Troubleshooting tagging issues</li> <li>Automation scripts</li> <li> <p>Best practices for releases</p> </li> <li> <p>SOLUTION_SUMMARY.md - Architecture and implementation</p> </li> <li>System architecture</li> <li>Design decisions</li> <li>Performance characteristics</li> <li>Implementation details</li> <li> <p>Future enhancements</p> </li> <li> <p>CHANGELOG.md - Version history</p> </li> <li>Release notes</li> <li>Change tracking</li> <li>Version format</li> </ul>"},{"location":"#tools-ide","title":"Tools &amp; IDE","text":"<ul> <li>AGENT_COLLABORATION.md - Multi-agent coordination guide</li> <li>Cross-platform communication protocols</li> <li>Task coordination strategies</li> <li>Conflict resolution procedures</li> <li>Quality standards for all agents</li> <li>GitHub Copilot and other AI tool integration</li> <li> <p>Best practices for agent collaboration</p> </li> <li> <p>COPILOT_INTEGRATION.md - GitHub Copilot integration guide</p> </li> <li>Setup and configuration</li> <li>Using Copilot for development</li> <li>Project-specific instructions</li> <li>Best practices</li> <li>Troubleshooting</li> <li> <p>Examples and workflows</p> </li> <li> <p>.vscode/README.md - VS Code setup guide</p> </li> <li>Extension recommendations</li> <li>Configuration files</li> <li>Keyboard shortcuts</li> <li>Debugging setup</li> <li>Common workflows</li> <li>Copilot integration</li> <li> <p>Troubleshooting</p> </li> <li> <p>.vscode/GITHUB_INTEGRATION_GUIDE.md - GitHub authentication</p> </li> <li>Personal Access Token setup</li> <li>VS Code GitHub integration</li> <li>OAuth authentication</li> <li>Troubleshooting</li> <li> <p>Security best practices</p> </li> <li> <p>WORKSPACE_STATUS.md - Complete workspace verification</p> </li> <li>Repository status</li> <li>Development environment verification</li> <li>Test results</li> <li>Code quality tools status</li> <li>Pre-commit hooks verification</li> <li>VS Code configuration status</li> <li>SynTechRev-PolyCodCal.code-workspace - VS Code workspace file</li> <li>Pre-configured settings</li> <li>Debug configurations</li> <li>Tasks and shortcuts</li> <li>PYTHONPATH setup</li> </ul>"},{"location":"#find-what-you-need","title":"\ud83c\udfaf Find What You Need","text":""},{"location":"#i-want-to","title":"I want to...","text":""},{"location":"#get-started-quickly","title":"Get started quickly","text":"<p>\u2192 GETTING_STARTED.md \u2b50 RECOMMENDED \u2192 QUICKSTART.md</p>"},{"location":"#understand-the-project","title":"Understand the project","text":"<p>\u2192 README.md \u2192 SOLUTION_SUMMARY.md</p>"},{"location":"#contribute-code","title":"Contribute code","text":"<p>\u2192 CONTRIBUTING.md \u2192 DEVELOPMENT_WORKFLOW.md</p>"},{"location":"#set-up-vs-code","title":"Set up VS Code","text":"<p>\u2192 GETTING_STARTED.md \u2b50 \u2192 .vscode/README.md</p>"},{"location":"#authenticate-github-in-vs-code","title":"Authenticate GitHub in VS Code","text":"<p>\u2192 .vscode/GITHUB_INTEGRATION_GUIDE.md</p>"},{"location":"#verify-workspace-status","title":"Verify workspace status","text":"<p>\u2192 WORKSPACE_STATUS.md</p>"},{"location":"#use-github-copilot","title":"Use GitHub Copilot","text":"<p>\u2192 COPILOT_INTEGRATION.md \u2b50 \u2192 GETTING_STARTED.md</p>"},{"location":"#fix-code-quality-issues","title":"Fix code quality issues","text":"<p>\u2192 CODE_REPAIR_STRATEGY.md</p>"},{"location":"#create-a-release-tag","title":"Create a release tag","text":"<p>\u2192 TAGGING_GUIDE.md \u2192 VSCODE_TAGGING.md (for VS Code users) \u2192 PHASE5_COMPLETION_GUIDE.md (Phase 5 end-to-end)</p>"},{"location":"#understand-what-changed","title":"Understand what changed","text":"<p>\u2192 CHANGELOG.md</p>"},{"location":"#use-the-feedbackmonitor","title":"Use the FeedbackMonitor","text":"<p>\u2192 README.md</p>"},{"location":"#run-tests","title":"Run tests","text":"<p>\u2192 CONTRIBUTING.md \u2192 QUICKSTART.md</p>"},{"location":"#submit-a-pull-request","title":"Submit a pull request","text":"<p>\u2192 CONTRIBUTING.md \u2192 DEVELOPMENT_WORKFLOW.md</p>"},{"location":"#fix-failing-tests","title":"Fix failing tests","text":"<p>\u2192 CODE_REPAIR_STRATEGY.md \u2192 DEVELOPMENT_WORKFLOW.md</p>"},{"location":"#configure-my-editor","title":"Configure my editor","text":"<p>\u2192 .vscode/README.md</p>"},{"location":"#use-github-copilot_1","title":"Use GitHub Copilot","text":"<p>\u2192 COPILOT_INTEGRATION.md</p>"},{"location":"#document-summaries","title":"\ud83d\udcd6 Document Summaries","text":""},{"location":"#quickstartmd","title":"QUICKSTART.md","text":"<p>Purpose: Get new developers up and running in 5 minutes Key Sections: - Prerequisites - Setup steps (1-5) - VS Code configuration - First test run - Try it out - Common commands</p> <p>Best for: Brand new contributors, first-time setup</p>"},{"location":"#readmemd","title":"README.md","text":"<p>Purpose: Main project documentation and reference Key Sections: - Project description - Quick start - FeedbackMonitor usage - Development overview - Project structure - Resources</p> <p>Best for: Understanding what the project does, quick reference</p>"},{"location":"#contributingmd","title":"CONTRIBUTING.md","text":"<p>Purpose: Comprehensive guide for contributors Key Sections: - Getting started - Development workflow - Code standards - Testing requirements - Submitting changes - Code review process - Tips for success</p> <p>Best for: Contributors wanting detailed guidelines, code standards</p>"},{"location":"#development_workflowmd","title":"DEVELOPMENT_WORKFLOW.md","text":"<p>Purpose: Visual and detailed workflow documentation Key Sections: - Workflow diagrams - 8-step development process - Code repair workflow - Common scenarios - Best practices - Troubleshooting</p> <p>Best for: Understanding the complete development lifecycle, visual learners</p>"},{"location":"#code_repair_strategymd","title":"CODE_REPAIR_STRATEGY.md","text":"<p>Purpose: Systematic approach to fixing code quality issues Key Sections: - Assessment phase - Prioritization methodology - Systematic repair process - Verification steps - Tools and configuration - Common issues and solutions - Best practices</p> <p>Best for: Fixing bugs, improving code quality, maintaining standards</p>"},{"location":"#vscodereadmemd","title":".vscode/README.md","text":"<p>Purpose: VS Code specific setup and usage Key Sections: - Quick setup - Configuration files overview - Common workflows - Keyboard shortcuts - Tips and tricks - Troubleshooting</p> <p>Best for: VS Code users, IDE configuration</p>"},{"location":"#changelogmd","title":"CHANGELOG.md","text":"<p>Purpose: Track changes and versions Key Sections: - Version history - Change categories - Release notes - Development process notes</p> <p>Best for: Understanding what changed between versions</p>"},{"location":"#copilot_integrationmd","title":"COPILOT_INTEGRATION.md","text":"<p>Purpose: GitHub Copilot setup and usage guide Key Sections: - What's new with Copilot integration - Initial setup instructions - Using Copilot for development - Working without mypy CLI - Troubleshooting - Best practices - Examples and workflows</p> <p>Best for: Setting up GitHub Copilot, AI-assisted development</p>"},{"location":"#documentation-flow","title":"\ud83d\uddfa\ufe0f Documentation Flow","text":"<p>Recommended reading order for new contributors:</p> <ol> <li>Start Here \u2192 QUICKSTART.md</li> <li>Get environment set up</li> <li> <p>Run your first test</p> </li> <li> <p>Learn the Project \u2192 README.md</p> </li> <li>Understand what it does</li> <li> <p>See usage examples</p> </li> <li> <p>Understand Workflow \u2192 DEVELOPMENT_WORKFLOW.md</p> </li> <li>Visual workflow guide</li> <li> <p>Common scenarios</p> </li> <li> <p>Detailed Guidelines \u2192 CONTRIBUTING.md</p> </li> <li>Code standards</li> <li>Testing requirements</li> <li> <p>PR process</p> </li> <li> <p>IDE Setup \u2192 .vscode/README.md (if using VS Code)</p> </li> <li>Configure editor</li> <li> <p>Learn shortcuts</p> </li> <li> <p>Copilot Integration \u2192 COPILOT_INTEGRATION.md (optional)</p> </li> <li>Set up GitHub Copilot</li> <li> <p>Learn AI-assisted development</p> </li> <li> <p>Code Quality \u2192 CODE_REPAIR_STRATEGY.md</p> </li> <li>When fixing issues</li> <li>Maintaining quality</li> </ol>"},{"location":"#quick-reference","title":"\ud83d\udd0d Quick Reference","text":""},{"location":"#commands","title":"Commands","text":"<pre><code># Setup\npip install -r dev-requirements.txt\npip install -e .\npre-commit install\n\n# Testing\npytest -v\npytest --cov=src/syntechrev_polycodcal\n\n# Quality\nblack src tests scripts\nruff check .\nmypy src\npre-commit run --all-files\n\n# Git\ngit checkout -b feature/your-feature\ngit add .\ngit commit -m \"feat: description\"\ngit push origin feature/your-feature\n</code></pre>"},{"location":"#file-locations","title":"File Locations","text":"<pre><code>SynTechRev-PolyCodCal/\n\u251c\u2500\u2500 QUICKSTART.md              # 5-min setup guide\n\u251c\u2500\u2500 README.md                  # Main documentation\n\u251c\u2500\u2500 CONTRIBUTING.md            # Contribution guide\n\u251c\u2500\u2500 CODE_REPAIR_STRATEGY.md    # Quality guide\n\u251c\u2500\u2500 CHANGELOG.md               # Version history\n\u251c\u2500\u2500 docs/\n\u2502   \u251c\u2500\u2500 INDEX.md               # This file\n\u2502   \u2514\u2500\u2500 DEVELOPMENT_WORKFLOW.md # Workflow guide\n\u251c\u2500\u2500 .vscode/\n\u2502   \u2514\u2500\u2500 README.md              # VS Code guide\n\u2514\u2500\u2500 src/syntechrev_polycodcal/ # Source code\n</code></pre>"},{"location":"#vs-code-shortcuts","title":"VS Code Shortcuts","text":"<ul> <li><code>Ctrl+Shift+T</code> - Run tests</li> <li><code>Ctrl+Shift+B</code> - Quality checks</li> <li><code>F5</code> - Debug</li> <li><code>Ctrl+`</code> - Terminal</li> </ul>"},{"location":"#tips","title":"\ud83d\udca1 Tips","text":""},{"location":"#for-new-contributors","title":"For New Contributors","text":"<ul> <li>Start with QUICKSTART.md</li> <li>Read CONTRIBUTING.md thoroughly</li> <li>Ask questions in discussions</li> </ul>"},{"location":"#for-vs-code-users","title":"For VS Code Users","text":"<ul> <li>Install recommended extensions</li> <li>Read .vscode/README.md</li> <li>Use keyboard shortcuts</li> </ul>"},{"location":"#for-code-reviewers","title":"For Code Reviewers","text":"<ul> <li>Reference CONTRIBUTING.md</li> <li>Check CODE_REPAIR_STRATEGY.md</li> </ul>"},{"location":"#for-maintainers","title":"For Maintainers","text":"<ul> <li>Update CHANGELOG.md regularly</li> <li>Keep documentation in sync with code</li> <li>Review CODE_REPAIR_STRATEGY.md periodically</li> </ul>"},{"location":"#need-help","title":"\ud83c\udd98 Need Help?","text":"<ol> <li>Check documentation - Use this index to find relevant guide</li> <li>Search issues - Your question may already be answered</li> <li>Ask in discussions - Community support</li> <li>Open an issue - For bugs or feature requests</li> </ol>"},{"location":"#keeping-documentation-updated","title":"\ud83d\udd04 Keeping Documentation Updated","text":"<p>When making changes: - Update relevant documentation - Add entry to CHANGELOG.md - Update this index if adding new docs - Keep examples current</p>"},{"location":"#contributing-to-docs","title":"\ud83d\udcdd Contributing to Docs","text":"<p>Documentation improvements are always welcome!</p> <ul> <li>Fix typos or unclear explanations</li> <li>Add examples or use cases</li> <li>Improve organization</li> <li>Add diagrams or visuals</li> </ul> <p>See CONTRIBUTING.md for how to submit changes.</p> <p>Last Updated: 2025-10-17 Version: 0.2.0rc1 (Phase 7 Ready)</p> <p>For the latest documentation, visit the repository.</p>"},{"location":"AGENT_COLLABORATION/","title":"Agent Collaboration Guide","text":"<p>This guide explains how different AI agents and tools can work together effectively on this project, ensuring smooth cross-platform communication and task coordination.</p>"},{"location":"AGENT_COLLABORATION/#overview","title":"Overview","text":"<p>This project is designed to support multiple AI coding agents working together: - GitHub Copilot: Inline code suggestions and completions - GitHub Copilot Chat: Conversational assistance and explanations - Copilot Workspace Agents: Pull request and issue automation - Other AI Tools: Compatible with any AI tool respecting project conventions</p>"},{"location":"AGENT_COLLABORATION/#project-state-management","title":"Project State Management","text":""},{"location":"AGENT_COLLABORATION/#repository-structure","title":"Repository Structure","text":"<p>The repository maintains clear separation of concerns:</p> <pre><code>SynTechRev-PolyCodCal/\n\u251c\u2500\u2500 src/                      # Source code (all agents can modify)\n\u251c\u2500\u2500 tests/                    # Test suite (all agents can modify)\n\u251c\u2500\u2500 scripts/                  # CLI utilities (all agents can modify)\n\u251c\u2500\u2500 docs/                     # Documentation (all agents can modify)\n\u251c\u2500\u2500 .vscode/                  # VSCode settings (tracked, collaborative)\n\u251c\u2500\u2500 .github/                  # GitHub workflows and agent instructions\n\u2502   \u251c\u2500\u2500 copilot-instructions.md  # Instructions for Copilot\n\u2502   \u2514\u2500\u2500 workflows/           # CI/CD configurations\n\u2514\u2500\u2500 examples/                # Example data files\n</code></pre>"},{"location":"AGENT_COLLABORATION/#files-to-track-vs-ignore","title":"Files to Track vs Ignore","text":"<p>Always tracked (commit these): - Source code: <code>src/</code>, <code>tests/</code>, <code>scripts/</code> - Configuration: <code>.vscode/</code> workspace settings, <code>pyproject.toml</code>, <code>mypy.ini</code> - Documentation: <code>docs/</code>, <code>README.md</code>, <code>CONTRIBUTING.md</code>, etc. - Dependencies: <code>requirements.txt</code>, <code>dev-requirements.txt</code> - CI/CD: <code>.github/workflows/</code></p> <p>Never tracked (<code>.gitignore</code> excludes these): - Virtual environments: <code>.venv/</code>, <code>venv/</code> - Python cache: <code>__pycache__/</code>, <code>*.pyc</code> - Test artifacts: <code>.pytest_cache/</code>, <code>htmlcov/</code>, <code>.coverage</code> - Build artifacts: <code>dist/</code>, <code>build/</code>, <code>*.egg-info/</code> - IDE user settings: <code>.vscode/*.code-workspace</code> (workspace-specific)</p>"},{"location":"AGENT_COLLABORATION/#branch-strategy","title":"Branch Strategy","text":"<p>Main branches: - <code>main</code>: Production-ready code, always stable - <code>feature/*</code>: New feature development - <code>fix/*</code>: Bug fixes - <code>docs/*</code>: Documentation updates - <code>copilot/*</code>: Copilot-generated branches</p> <p>Agent collaboration pattern: 1. Create feature branch from <code>main</code> 2. Make changes in isolated commits 3. Push regularly for CI verification 4. Create PR when ready 5. Merge after approval and passing checks</p>"},{"location":"AGENT_COLLABORATION/#communication-protocols","title":"Communication Protocols","text":""},{"location":"AGENT_COLLABORATION/#1-code-comments-for-context","title":"1. Code Comments for Context","text":"<p>Agents should use specific comment patterns for communication:</p> <p>Task handoff:</p> <pre><code># TODO(agent-name): Task description\n# Example: TODO(copilot): Implement error handling for edge case\n</code></pre> <p>Design decisions:</p> <pre><code># DESIGN: Why this approach was chosen\n# Example: DESIGN: Using deque for O(1) window management\n</code></pre> <p>Cross-agent notes:</p> <pre><code># NOTE(to-next-agent): Context or warning\n# Example: NOTE(to-next-agent): This function is used by CLI, don't change signature\n</code></pre> <p>Issues requiring human input:</p> <pre><code># FIXME(human-needed): Describe what needs human decision\n# Example: FIXME(human-needed): Choose between approach A or B for performance\n</code></pre>"},{"location":"AGENT_COLLABORATION/#2-commit-message-convention","title":"2. Commit Message Convention","text":"<p>All agents should follow Conventional Commits:</p> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;description&gt;\n\n[optional body]\n\n[optional footer]\n</code></pre> <p>Types: - <code>feat</code>: New feature - <code>fix</code>: Bug fix - <code>docs</code>: Documentation only - <code>test</code>: Adding or updating tests - <code>refactor</code>: Code restructuring - <code>style</code>: Formatting changes - <code>chore</code>: Maintenance tasks</p> <p>Examples:</p> <pre><code>feat(monitor): add percentile tracking to FeedbackMonitor\nfix(core): correct timezone handling in timestamp conversion\ndocs(readme): update installation instructions\ntest(monitor): add edge case tests for empty window\n</code></pre>"},{"location":"AGENT_COLLABORATION/#3-pr-descriptions","title":"3. PR Descriptions","text":"<p>Use this template for consistency:</p> <pre><code>## Summary\nBrief description of changes\n\n## Changes Made\n- [ ] Task 1\n- [ ] Task 2\n- [x] Task 3 (completed)\n\n## Testing\n- How changes were tested\n- Test results\n\n## Agent Notes\n- Context for next agent or reviewer\n- Dependencies or considerations\n</code></pre>"},{"location":"AGENT_COLLABORATION/#task-coordination","title":"Task Coordination","text":""},{"location":"AGENT_COLLABORATION/#sequential-tasks-one-agent-at-a-time","title":"Sequential Tasks (One Agent at a Time)","text":"<p>Pattern: Each agent completes a full task before next agent starts</p> <p>Example workflow: 1. Agent A: Implements feature    - Writes code    - Writes tests    - Updates docs    - Commits: \"feat: add new feature\"</p> <ol> <li>Agent B: Reviews and enhances</li> <li>Adds edge case handling</li> <li>Improves error messages</li> <li> <p>Commits: \"refactor: improve error handling\"</p> </li> <li> <p>Agent C: Documentation</p> </li> <li>Updates user guide</li> <li>Adds examples</li> <li>Commits: \"docs: add usage examples\"</li> </ol>"},{"location":"AGENT_COLLABORATION/#parallel-tasks-multiple-agents","title":"Parallel Tasks (Multiple Agents)","text":"<p>Pattern: Different agents work on independent files/features</p> <p>Safe for parallel work: - Different modules in <code>src/</code> - Different test files - Different documentation files - Independent scripts</p> <p>Requires coordination: - Same source file - Shared configuration - Test dependencies</p> <p>Merge strategy:</p> <pre><code># Agent A's work\ngit checkout -b feature/agent-a-task\n# ... make changes ...\ngit commit -m \"feat: implement feature A\"\n\n# Agent B's work (parallel)\ngit checkout -b feature/agent-b-task\n# ... make changes ...\ngit commit -m \"feat: implement feature B\"\n\n# Merge both\ngit checkout main\ngit merge feature/agent-a-task\ngit merge feature/agent-b-task\n# Resolve conflicts if any\n</code></pre>"},{"location":"AGENT_COLLABORATION/#conflict-resolution-protocol","title":"Conflict Resolution Protocol","text":"<p>When changes conflict:</p> <ol> <li>Automatic resolution (if possible):</li> <li>Accept formatting changes from most recent agent</li> <li>Merge non-overlapping changes</li> <li> <p>Preserve all functionality</p> </li> <li> <p>Human escalation (if needed): <code>python    # CONFLICT: Agent A added X, Agent B added Y    # HUMAN-DECISION: Which approach to use?    # Option A: (show code)    # Option B: (show code)</code></p> </li> </ol>"},{"location":"AGENT_COLLABORATION/#cross-platform-compatibility","title":"Cross-Platform Compatibility","text":""},{"location":"AGENT_COLLABORATION/#path-handling","title":"Path Handling","text":"<p>Always use forward slashes in config files:</p> <pre><code>{\n  \"python.defaultInterpreterPath\": \"${workspaceFolder}/.venv/bin/python\"\n}\n</code></pre> <p>This works on all platforms (VSCode translates on Windows).</p> <p>In Python code, use <code>pathlib</code>:</p> <pre><code>from pathlib import Path\n\n# Good - cross-platform\nproject_root = Path(__file__).parent.parent\nconfig_file = project_root / \"config\" / \"settings.json\"\n\n# Avoid - platform-specific\nconfig_file = \"config\\\\settings.json\"  # Windows only\n</code></pre>"},{"location":"AGENT_COLLABORATION/#command-examples","title":"Command Examples","text":"<p>Provide cross-platform alternatives:</p> <pre><code>**Windows (PowerShell):**\n```powershell\n.\\.venv\\Scripts\\Activate.ps1\n</code></pre> <p>macOS/Linux:</p> <pre><code>source .venv/bin/activate\n</code></pre> <pre><code>### Environment Variables\n\nSet in platform-specific way:\n\n```bash\n# Linux/macOS\nexport PYTHONPATH=\"${PWD}/src\"\n\n# Windows PowerShell\n$env:PYTHONPATH = \"${PWD}\\src\"\n\n# Windows Command Prompt\nset PYTHONPATH=%CD%\\src\n</code></pre> <p>VSCode settings handle this automatically:</p> <pre><code>\"terminal.integrated.env.linux\": {\"PYTHONPATH\": \"${workspaceFolder}/src\"},\n\"terminal.integrated.env.osx\": {\"PYTHONPATH\": \"${workspaceFolder}/src\"},\n\"terminal.integrated.env.windows\": {\"PYTHONPATH\": \"${workspaceFolder}/src\"}\n</code></pre>"},{"location":"AGENT_COLLABORATION/#quality-standards","title":"Quality Standards","text":""},{"location":"AGENT_COLLABORATION/#all-agents-must","title":"All Agents Must","text":"<p>Before committing: - [ ] Run tests: <code>pytest -v</code> - [ ] Format code: <code>black src tests scripts</code> - [ ] Check linting: <code>ruff check .</code> - [ ] Type check: <code>mypy src</code> - [ ] Update relevant docs</p> <p>Code standards: - Type hints on all functions - Docstrings for public APIs - Test coverage for new code - No breaking changes to existing APIs</p> <p>Documentation standards: - Update README if adding features - Add examples for new functionality - Keep CHANGELOG.md current - Cross-reference related docs</p>"},{"location":"AGENT_COLLABORATION/#cicd-integration","title":"CI/CD Integration","text":"<p>All changes are automatically verified:</p> <pre><code># .github/workflows/ci.yml\n- Run tests on Python 3.11, 3.12, 3.13\n- Check formatting with Black\n- Lint with Ruff\n- Type check with mypy\n- Calculate coverage\n- Report to Codecov\n</code></pre> <p>Wait for CI before merging: - \u2705 All checks must pass - \u2705 Coverage must not decrease - \u2705 No new linting errors</p>"},{"location":"AGENT_COLLABORATION/#tool-specific-guidelines","title":"Tool-Specific Guidelines","text":""},{"location":"AGENT_COLLABORATION/#github-copilot","title":"GitHub Copilot","text":"<p>Usage: - Read <code>.github/copilot-instructions.md</code> for project context - Use inline suggestions for routine code - Use Copilot Chat for explanations and refactoring - Respect existing patterns and conventions</p> <p>Best practices: - Accept suggestions that match project style - Modify suggestions to add type hints if missing - Verify suggestions with tests - Don't blindly accept - understand the code</p>"},{"location":"AGENT_COLLABORATION/#github-copilot-workspace","title":"GitHub Copilot Workspace","text":"<p>When creating PRs: - Use descriptive branch names: <code>copilot/feature-description</code> - Include task checklist in PR description - Reference related issues - Add \"Ready for Review\" when complete</p> <p>When addressing reviews: - Create commits addressing each comment - Use \"fix(review): address feedback on X\" - Update PR description with progress</p>"},{"location":"AGENT_COLLABORATION/#custom-ai-tools","title":"Custom AI Tools","text":"<p>Integration requirements: - Respect <code>.gitignore</code> - Follow commit message convention - Run quality checks before committing - Update documentation with code changes</p> <p>Configuration: Read these files for context: - <code>.github/copilot-instructions.md</code> - Code style and patterns - <code>CONTRIBUTING.md</code> - Workflow and standards - <code>CODE_REPAIR_STRATEGY.md</code> - Quality methodology - <code>docs/ENVIRONMENT_RESET.md</code> - Setup procedures</p>"},{"location":"AGENT_COLLABORATION/#handoff-procedures","title":"Handoff Procedures","text":""},{"location":"AGENT_COLLABORATION/#completing-your-task","title":"Completing Your Task","text":"<p>Before passing to next agent:</p> <ol> <li> <p>Verify your changes: <code>bash    pytest -v                    # All tests pass    black --check src tests      # Formatting correct    ruff check .                 # No linting errors    mypy src                     # Type checking passes</code></p> </li> <li> <p>Update documentation:</p> </li> <li>Code comments for complex logic</li> <li>Docstrings for new functions</li> <li>README if feature added</li> <li> <p>CHANGELOG with entry</p> </li> <li> <p>Commit with context:    ```bash    git add .    git commit -m \"feat: description</p> </li> <li> <p>Detail 1</p> </li> <li>Detail 2</li> </ol> <p>Next steps: [describe what's needed next]\"    ```</p> <ol> <li>Push and notify: <code>bash    git push origin feature/your-branch</code></li> </ol>"},{"location":"AGENT_COLLABORATION/#picking-up-someones-work","title":"Picking Up Someone's Work","text":"<p>Before starting:</p> <ol> <li> <p>Understand context: <code>bash    git log --oneline -10        # Recent commits    git diff main...HEAD         # What changed</code></p> </li> <li> <p>Check for notes:</p> </li> <li>Read commit messages</li> <li>Look for TODO/NOTE comments</li> <li> <p>Review PR description</p> </li> <li> <p>Verify environment: <code>bash    pytest -v                    # Tests pass    python --version             # Python 3.11+    pip list                     # Dependencies installed</code></p> </li> <li> <p>Continue work:</p> </li> <li>Make incremental changes</li> <li>Test frequently</li> <li>Commit regularly</li> <li>Document as you go</li> </ol>"},{"location":"AGENT_COLLABORATION/#common-scenarios","title":"Common Scenarios","text":""},{"location":"AGENT_COLLABORATION/#scenario-1-feature-implementation","title":"Scenario 1: Feature Implementation","text":"<p>Agent workflow: 1. Create branch: <code>feature/add-percentile-tracking</code> 2. Implement feature in <code>src/</code> 3. Add tests in <code>tests/</code> 4. Update docstring and README 5. Run quality checks 6. Commit: <code>feat(monitor): add percentile tracking</code> 7. Push and create PR</p>"},{"location":"AGENT_COLLABORATION/#scenario-2-bug-fix","title":"Scenario 2: Bug Fix","text":"<p>Agent workflow: 1. Create branch: <code>fix/timezone-handling</code> 2. Add failing test demonstrating bug 3. Fix the bug 4. Verify test passes 5. Run full test suite 6. Commit: <code>fix(core): correct timezone handling</code> 7. Push and create PR</p>"},{"location":"AGENT_COLLABORATION/#scenario-3-documentation-update","title":"Scenario 3: Documentation Update","text":"<p>Agent workflow: 1. Create branch: <code>docs/improve-quickstart</code> 2. Update documentation files 3. Verify examples still work 4. Check links and formatting 5. Commit: <code>docs: improve quickstart guide</code> 6. Push and create PR</p>"},{"location":"AGENT_COLLABORATION/#scenario-4-refactoring","title":"Scenario 4: Refactoring","text":"<p>Agent workflow: 1. Create branch: <code>refactor/extract-validation</code> 2. Write tests for current behavior 3. Refactor code 4. Verify all tests still pass 5. Check no API changes 6. Commit: <code>refactor(monitor): extract validation logic</code> 7. Push and create PR</p>"},{"location":"AGENT_COLLABORATION/#emergency-procedures","title":"Emergency Procedures","text":""},{"location":"AGENT_COLLABORATION/#critical-bug-in-main","title":"Critical Bug in Main","text":"<ol> <li>Create hotfix branch: <code>fix/critical-bug</code></li> <li>Minimal fix only</li> <li>Add test for bug</li> <li>Fast-track review</li> <li>Merge immediately after CI passes</li> </ol>"},{"location":"AGENT_COLLABORATION/#merge-conflict","title":"Merge Conflict","text":"<ol> <li>Fetch latest: <code>git fetch origin main</code></li> <li>Attempt merge: <code>git merge origin/main</code></li> <li>If conflicts, mark for human:    <code>python    # MERGE-CONFLICT: Description    # HUMAN-NEEDED: Resolve conflict between X and Y</code></li> <li>Create issue with details</li> <li>Wait for human resolution</li> </ol>"},{"location":"AGENT_COLLABORATION/#ci-failure","title":"CI Failure","text":"<ol> <li>Check failure logs in GitHub Actions</li> <li>Reproduce locally: <code>pytest -v</code> or <code>ruff check .</code></li> <li>Fix issue</li> <li>Commit: <code>fix(ci): resolve test failure</code></li> <li>Push for re-verification</li> </ol>"},{"location":"AGENT_COLLABORATION/#best-practices-summary","title":"Best Practices Summary","text":"<p>Do: - \u2705 Follow existing patterns and conventions - \u2705 Write comprehensive tests - \u2705 Update documentation with code - \u2705 Use type hints consistently - \u2705 Run quality checks before committing - \u2705 Make small, focused commits - \u2705 Provide context in commit messages - \u2705 Test cross-platform compatibility</p> <p>Don't: - \u274c Commit generated files (.venv, pycache, etc.) - \u274c Make breaking changes without discussion - \u274c Skip tests or quality checks - \u274c Remove working code without justification - \u274c Mix multiple unrelated changes in one commit - \u274c Leave TODO comments without context - \u274c Assume Windows-only or Linux-only</p>"},{"location":"AGENT_COLLABORATION/#resources","title":"Resources","text":"<ul> <li>Setup: <code>QUICKSTART.md</code>, <code>GETTING_STARTED.md</code></li> <li>Contributing: <code>CONTRIBUTING.md</code></li> <li>Workflow: <code>docs/DEVELOPMENT_WORKFLOW.md</code></li> <li>Quality: <code>CODE_REPAIR_STRATEGY.md</code></li> <li>Environment: <code>docs/ENVIRONMENT_RESET.md</code></li> <li>VSCode: <code>.vscode/README.md</code></li> <li>Copilot: <code>.github/copilot-instructions.md</code></li> </ul>"},{"location":"AGENT_COLLABORATION/#getting-help","title":"Getting Help","text":"<p>For agents: - Read relevant documentation files - Check commit history for context - Look for TODO/NOTE comments - Review PR descriptions</p> <p>For humans: - Open an issue with \"agent-question\" label - Tag \"agent-coordination\" for workflow questions - Provide context: what agent, what task, what error</p> <p>This collaboration framework ensures smooth coordination between AI agents, maintainers, and contributors while maintaining code quality and project consistency across all platforms.</p>"},{"location":"DEVELOPMENT_WORKFLOW/","title":"Development Workflow","text":"<p>This document provides a visual and step-by-step guide to the development workflow for SynTechRev-PolyCodCal.</p>"},{"location":"DEVELOPMENT_WORKFLOW/#overview","title":"Overview","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502                    Development Lifecycle                     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n                              \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502  1. Setup        \u2502\n                    \u2502  Environment     \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n                              \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502  2. Create       \u2502\n                    \u2502  Feature Branch  \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n                              \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502  3. Develop      \u2502\n                    \u2502  &amp; Test          \u2502\u25c4\u2500\u2500\u2510\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n                              \u2502            \u2502\n                              \u25bc            \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n                    \u2502  4. Quality      \u2502   \u2502\n                    \u2502  Checks          \u2502   \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518   \u2502\n                              \u2502            \u2502\n                              \u25bc            \u2502\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510   \u2502\n                    \u2502  5. Commit       \u2502   \u2502\n                    \u2502  Changes         \u2502\u2500\u2500\u2500\u2518\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n                              \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502  6. Push &amp;       \u2502\n                    \u2502  Create PR       \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n                              \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502  7. Code Review  \u2502\n                    \u2502  &amp; CI/CD         \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                              \u2502\n                              \u25bc\n                    \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n                    \u2502  8. Merge to     \u2502\n                    \u2502  Main            \u2502\n                    \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"DEVELOPMENT_WORKFLOW/#detailed-steps","title":"Detailed Steps","text":""},{"location":"DEVELOPMENT_WORKFLOW/#step-1-setup-environment","title":"Step 1: Setup Environment","text":"<p>First time only:</p> <pre><code># Clone repository\ngit clone https://github.com/SynTechRev/SynTechRev-PolyCodCal.git\ncd SynTechRev-PolyCodCal\n\n# Create virtual environment\npython -m venv .venv\n\n# Activate virtual environment\n# On Windows:\n.venv\\Scripts\\activate\n# On Unix/Mac:\nsource .venv/bin/activate\n\n# Install dependencies\npip install -r dev-requirements.txt\npip install -e .\n\n# Install pre-commit hooks\npre-commit install\n\n# Verify setup\npytest -v\n</code></pre> <p>Result: Development environment ready \u2705</p>"},{"location":"DEVELOPMENT_WORKFLOW/#step-2-create-feature-branch","title":"Step 2: Create Feature Branch","text":"<pre><code># Ensure you're on main and up to date\ngit checkout main\ngit pull origin main\n\n# Create and switch to feature branch\ngit checkout -b feature/your-feature-name\n</code></pre> <p>Branch naming conventions: - <code>feature/add-notification-system</code> - <code>bugfix/fix-timestamp-parsing</code> - <code>docs/update-api-guide</code> - <code>refactor/simplify-monitor-logic</code> - <code>test/add-edge-case-tests</code></p> <p>Result: Working on isolated feature branch \u2705</p>"},{"location":"DEVELOPMENT_WORKFLOW/#step-3-develop-test","title":"Step 3: Develop &amp; Test","text":"<p>This is an iterative cycle:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        Development Cycle               \u2502\n\u2502                                        \u2502\n\u2502  1. Write Code                         \u2502\n\u2502      \u2193                                 \u2502\n\u2502  2. Write/Update Tests                 \u2502\n\u2502      \u2193                                 \u2502\n\u2502  3. Run Tests Locally                  \u2502\n\u2502      \u2193                                 \u2502\n\u2502  4. Debug if Failed  \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u2502\n\u2502      \u2193                         \u2502       \u2502\n\u2502  5. Tests Pass? \u2500\u2500\u2500NO\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2502\n\u2502      \u2502                                 \u2502\n\u2502      YES                               \u2502\n\u2502      \u2193                                 \u2502\n\u2502  Continue Development or Move to       \u2502\n\u2502  Quality Checks                        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>Commands:</p> <pre><code># Run tests\npytest -v\n\n# Run specific test file\npytest tests/test_feedback_monitor.py -v\n\n# Run with coverage\npytest --cov=src/syntechrev_polycodcal --cov-report=term-missing\n\n# Debug mode (stop on first failure)\npytest -x -v\n\n# Verbose output\npytest -vv -s\n</code></pre> <p>VS Code shortcuts: - <code>Ctrl+Shift+T</code> - Run tests - <code>F5</code> - Debug tests</p> <p>Result: Feature implemented with passing tests \u2705</p>"},{"location":"DEVELOPMENT_WORKFLOW/#step-4-quality-checks","title":"Step 4: Quality Checks","text":"<p>Before committing, run all quality checks:</p> <pre><code># Format code\nblack src tests scripts\n\n# Run linter\nruff check .\n\n# Type checking\nmypy src\n\n# All checks (or use pre-commit)\npre-commit run --all-files\n</code></pre> <p>VS Code shortcut: - <code>Ctrl+Shift+B</code> - Run all quality checks</p> <p>Expected output:</p> <pre><code>\u2713 black - passed\n\u2713 ruff - passed  \n\u2713 mypy - passed\n\u2713 pytest - 15 passed\n</code></pre> <p>Result: Code meets quality standards \u2705</p>"},{"location":"DEVELOPMENT_WORKFLOW/#step-5-commit-changes","title":"Step 5: Commit Changes","text":"<pre><code># Stage changes\ngit add .\n\n# Or stage specific files\ngit add src/syntechrev_polycodcal/feedback_monitor.py\ngit add tests/test_feedback_monitor.py\n\n# Commit with conventional commit message\ngit commit -m \"feat: add email notification support\"\n\n# Or with detailed description\ngit commit -m \"feat: add email notification support\n\n- Implement EmailNotifier class\n- Add SMTP configuration\n- Update FeedbackMonitor to use notifier\n- Add tests for email notifications\"\n</code></pre> <p>Commit message format:</p> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n\n&lt;body&gt;\n\n&lt;footer&gt;\n</code></pre> <p>Types: - <code>feat</code>: New feature - <code>fix</code>: Bug fix - <code>docs</code>: Documentation - <code>test</code>: Tests - <code>refactor</code>: Code refactoring - <code>style</code>: Formatting - <code>chore</code>: Maintenance</p> <p>Result: Changes committed locally \u2705</p>"},{"location":"DEVELOPMENT_WORKFLOW/#step-6-push-create-pull-request","title":"Step 6: Push &amp; Create Pull Request","text":"<pre><code># Push feature branch\ngit push origin feature/your-feature-name\n\n# If first push of this branch\ngit push -u origin feature/your-feature-name\n</code></pre> <p>On GitHub:</p> <ol> <li>Navigate to repository</li> <li>Click \"Compare &amp; pull request\"</li> <li>Fill out PR template:</li> <li>Clear title</li> <li>Summary of changes</li> <li>How you tested</li> <li>Check all checklist items</li> <li>Link related issues (if any)</li> <li>Submit PR</li> </ol> <p>PR Template checklist:</p> <pre><code>## Summary\nBrief description of changes\n\n## Changes\n- Change 1\n- Change 2\n\n## Verification\n- [x] Unit tests added/updated\n- [x] Manual testing performed\n- [x] CI pipeline passes\n\n## Checklist\n- [x] Tests added / updated\n- [x] Documentation updated\n- [x] CI passes\n</code></pre> <p>Result: PR created and ready for review \u2705</p>"},{"location":"DEVELOPMENT_WORKFLOW/#step-7-code-review-cicd","title":"Step 7: Code Review &amp; CI/CD","text":"<p>Automated CI/CD checks:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502         CI/CD Pipeline               \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  1. Checkout Code                    \u2502\n\u2502  2. Setup Python (3.11, 3.12, 3.13)  \u2502\n\u2502  3. Install Dependencies             \u2502\n\u2502  4. Run Ruff Linting                 \u2502\n\u2502  5. Run Mypy Type Checking           \u2502\n\u2502  6. Run Pre-commit Hooks             \u2502\n\u2502  7. Run Pytest Tests                 \u2502\n\u2502  8. Generate Coverage Report         \u2502\n\u2502  9. Upload to Codecov                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>What happens: - GitHub Actions runs automatically on push - Tests run on multiple Python versions - Coverage report generated - Status checks appear on PR</p> <p>Code review process:</p> <ol> <li>Reviewer assigned (or self-assign)</li> <li>Reviewer checks:</li> <li>Code correctness</li> <li>Test coverage</li> <li>Code style and clarity</li> <li>Documentation</li> <li>Potential issues</li> <li>Reviewer provides feedback</li> <li>Comments on specific lines</li> <li>Suggests changes</li> <li>Approves or requests changes</li> </ol> <p>Responding to feedback:</p> <pre><code># Make requested changes\n# ... edit files ...\n\n# Run quality checks again\npre-commit run --all-files\n\n# Commit changes\ngit add .\ngit commit -m \"fix: address review feedback\"\n\n# Push updates\ngit push origin feature/your-feature-name\n</code></pre> <p>Result: PR approved and CI passes \u2705</p>"},{"location":"DEVELOPMENT_WORKFLOW/#step-8-merge-to-main","title":"Step 8: Merge to Main","text":"<p>When ready to merge:</p> <ol> <li>Ensure all CI checks pass \u2705</li> <li>Ensure PR is approved \u2705</li> <li>Resolve any merge conflicts</li> <li>Choose merge strategy:</li> <li>Squash and merge (recommended for feature branches)</li> <li>Merge commit (for collaborative branches)</li> <li> <p>Rebase and merge (for clean history)</p> </li> <li> <p>Click \"Merge pull request\"</p> </li> <li>Delete feature branch (optional but recommended)</li> </ol> <pre><code># After merge, update local main\ngit checkout main\ngit pull origin main\n\n# Delete local feature branch\ngit branch -d feature/your-feature-name\n</code></pre> <p>Result: Changes merged to main \u2705</p>"},{"location":"DEVELOPMENT_WORKFLOW/#code-repair-workflow","title":"Code Repair Workflow","text":"<p>Special workflow for fixing issues:</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502        Code Repair Process             \u2502\n\u251c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2524\n\u2502  1. Identify Issue                     \u2502\n\u2502     - Run tests to see failures        \u2502\n\u2502     - Check linting errors             \u2502\n\u2502     - Review type checking issues      \u2502\n\u2502                                        \u2502\n\u2502  2. Prioritize Repairs                 \u2502\n\u2502     - Critical: Test failures          \u2502\n\u2502     - High: Import/syntax errors       \u2502\n\u2502     - Medium: Type checking            \u2502\n\u2502     - Low: Formatting                  \u2502\n\u2502                                        \u2502\n\u2502  3. Fix Systematically                 \u2502\n\u2502     - One category at a time           \u2502\n\u2502     - Test after each fix              \u2502\n\u2502     - Commit incrementally             \u2502\n\u2502                                        \u2502\n\u2502  4. Verify Comprehensively             \u2502\n\u2502     - All tests pass                   \u2502\n\u2502     - Coverage maintained/improved     \u2502\n\u2502     - No linting violations            \u2502\n\u2502     - Type checking passes             \u2502\n\u2502                                        \u2502\n\u2502  5. Document Changes                   \u2502\n\u2502     - Update CHANGELOG.md              \u2502\n\u2502     - Add comments if needed           \u2502\n\u2502     - Update documentation             \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <p>See CODE_REPAIR_STRATEGY.md for complete details.</p>"},{"location":"DEVELOPMENT_WORKFLOW/#common-scenarios","title":"Common Scenarios","text":""},{"location":"DEVELOPMENT_WORKFLOW/#scenario-1-adding-a-new-feature","title":"Scenario 1: Adding a New Feature","text":"<pre><code># 1. Create branch\ngit checkout -b feature/add-webhooks\n\n# 2. Implement feature\n# ... write code ...\n\n# 3. Add tests\n# ... write tests ...\n\n# 4. Run tests\npytest -v\n\n# 5. Format and lint\nblack src tests\nruff check .\n\n# 6. Commit\ngit commit -m \"feat: add webhook notification support\"\n\n# 7. Push and create PR\ngit push -u origin feature/add-webhooks\n</code></pre>"},{"location":"DEVELOPMENT_WORKFLOW/#scenario-2-fixing-a-bug","title":"Scenario 2: Fixing a Bug","text":"<pre><code># 1. Create branch\ngit checkout -b bugfix/fix-timestamp-tz\n\n# 2. Write failing test first (TDD)\n# ... add test that demonstrates bug ...\n\n# 3. Verify test fails\npytest tests/test_feedback_monitor.py::test_timestamp_tz -v\n\n# 4. Fix the bug\n# ... fix code ...\n\n# 5. Verify test passes\npytest tests/test_feedback_monitor.py::test_timestamp_tz -v\n\n# 6. Run all tests\npytest -v\n\n# 7. Commit\ngit commit -m \"fix: handle timezone correctly in timestamps\"\n\n# 8. Push and create PR\ngit push -u origin bugfix/fix-timestamp-tz\n</code></pre>"},{"location":"DEVELOPMENT_WORKFLOW/#scenario-3-updating-documentation","title":"Scenario 3: Updating Documentation","text":"<pre><code># 1. Create branch\ngit checkout -b docs/update-api-docs\n\n# 2. Update documentation\n# ... edit .md files or docstrings ...\n\n# 3. Preview changes (for markdown)\n# Open in VS Code markdown preview\n\n# 4. Commit\ngit commit -m \"docs: update API documentation with examples\"\n\n# 5. Push and create PR\ngit push -u origin docs/update-api-docs\n</code></pre>"},{"location":"DEVELOPMENT_WORKFLOW/#best-practices","title":"Best Practices","text":""},{"location":"DEVELOPMENT_WORKFLOW/#dos","title":"Do's \u2705","text":"<ol> <li>Run tests frequently - catch issues early</li> <li>Commit small, logical changes - easier to review</li> <li>Write descriptive commit messages - helps reviewers</li> <li>Keep branches up to date - merge main regularly</li> <li>Test edge cases - improve robustness</li> <li>Document as you go - easier than later</li> <li>Ask for help - use issues/discussions</li> </ol>"},{"location":"DEVELOPMENT_WORKFLOW/#donts","title":"Don'ts \u274c","text":"<ol> <li>Don't commit directly to main - always use branches</li> <li>Don't skip tests - they catch bugs</li> <li>Don't ignore linting errors - maintain quality</li> <li>Don't mix unrelated changes - keep PRs focused</li> <li>Don't commit secrets - use environment variables</li> <li>Don't force push - can lose history</li> <li>Don't leave TODOs - finish or create issues</li> </ol>"},{"location":"DEVELOPMENT_WORKFLOW/#troubleshooting","title":"Troubleshooting","text":""},{"location":"DEVELOPMENT_WORKFLOW/#tests-failing","title":"Tests Failing","text":"<pre><code># Run with verbose output\npytest -vv -s\n\n# Run specific test\npytest tests/test_file.py::test_function -v\n\n# Use debugger\npytest --pdb\n\n# Check for environment issues\npython --version\npip list\n</code></pre>"},{"location":"DEVELOPMENT_WORKFLOW/#linting-errors","title":"Linting Errors","text":"<pre><code># See all errors\nruff check .\n\n# Auto-fix when possible\nruff check --fix .\n\n# Format code\nblack src tests scripts\n</code></pre>"},{"location":"DEVELOPMENT_WORKFLOW/#merge-conflicts","title":"Merge Conflicts","text":"<pre><code># Update your branch with main\ngit checkout main\ngit pull origin main\ngit checkout feature/your-branch\ngit merge main\n\n# Resolve conflicts in files\n# Edit conflicted files, remove markers\n# git add resolved-file\n\n# Complete merge\ngit commit\n\n# Or use rebase instead\ngit rebase main\n</code></pre>"},{"location":"DEVELOPMENT_WORKFLOW/#resources","title":"Resources","text":"<ul> <li>CONTRIBUTING.md - Detailed contribution guide</li> <li>CODE_REPAIR_STRATEGY.md - Code quality guide</li> <li>.vscode/README.md - VS Code setup</li> <li>Git Basics</li> <li>Python Testing</li> </ul>"},{"location":"DEVELOPMENT_WORKFLOW/#summary","title":"Summary","text":"<p>The development workflow ensures: - \u2705 High code quality - \u2705 Comprehensive testing - \u2705 Clear documentation - \u2705 Effective collaboration - \u2705 Reliable CI/CD</p> <p>Follow this workflow for successful contributions! \ud83d\ude80</p>"},{"location":"ENVIRONMENT_RESET/","title":"Environment Reset Guide","text":"<p>This guide helps you reset your development environment and resolve VSCode integration issues, especially after major PRs like PR #5 that include comprehensive configuration changes.</p>"},{"location":"ENVIRONMENT_RESET/#when-to-use-this-guide","title":"When to Use This Guide","text":"<p>Use this guide if you experience: - VSCode not recognizing the Python interpreter - Import errors despite having dependencies installed - Conflicts between local changes and GitHub repository state - Testing or linting tools not working correctly - GitHub Copilot integration issues</p>"},{"location":"ENVIRONMENT_RESET/#quick-reset-5-minutes","title":"Quick Reset (5 minutes)","text":""},{"location":"ENVIRONMENT_RESET/#1-clean-up-local-environment","title":"1. Clean Up Local Environment","text":"<p>Remove virtual environment:</p> <pre><code># On Windows (PowerShell)\nRemove-Item -Recurse -Force .venv\n\n# On macOS/Linux\nrm -rf .venv\n</code></pre> <p>Remove Python cache files:</p> <pre><code># On Windows (PowerShell)\nGet-ChildItem -Path . -Include __pycache__,*.pyc,*.pyo -Recurse -Force | Remove-Item -Recurse -Force\n\n# On macOS/Linux\nfind . -type d -name \"__pycache__\" -exec rm -rf {} + 2&gt;/dev/null\nfind . -type f -name \"*.pyc\" -delete\nfind . -type f -name \"*.pyo\" -delete\n</code></pre> <p>Remove test and coverage cache:</p> <pre><code># Cross-platform\nrm -rf .pytest_cache htmlcov .coverage coverage.xml .mypy_cache .ruff_cache\n</code></pre>"},{"location":"ENVIRONMENT_RESET/#2-sync-with-github-repository","title":"2. Sync with GitHub Repository","text":"<p>Check current state:</p> <pre><code>git status\ngit branch -a\n</code></pre> <p>If you have uncommitted changes you want to keep:</p> <pre><code>git stash save \"backup before reset\"\n</code></pre> <p>Reset to match GitHub main branch:</p> <pre><code># Fetch latest from GitHub\ngit fetch origin\n\n# If on a feature branch, update it\ngit checkout copilot/fix-vsc-environment-issue\ngit pull origin copilot/fix-vsc-environment-issue\n\n# Or switch to main if available\ngit checkout main\ngit pull origin main\n</code></pre> <p>If you stashed changes and want them back:</p> <pre><code>git stash pop\n</code></pre> <p>If you want to completely discard local changes:</p> <pre><code>git reset --hard origin/main\n# Or: git reset --hard origin/copilot/fix-vsc-environment-issue\n</code></pre>"},{"location":"ENVIRONMENT_RESET/#3-recreate-virtual-environment","title":"3. Recreate Virtual Environment","text":"<p>Create fresh virtual environment:</p> <pre><code># On Windows (PowerShell)\npython -m venv .venv\n.\\.venv\\Scripts\\Activate.ps1\n\n# On macOS/Linux\npython -m venv .venv\nsource .venv/bin/activate\n</code></pre> <p>Upgrade pip:</p> <pre><code>python -m pip install --upgrade pip\n</code></pre> <p>Install dependencies:</p> <pre><code># Install development dependencies\npip install -r dev-requirements.txt\n\n# Install project in editable mode\npip install -e .\n</code></pre>"},{"location":"ENVIRONMENT_RESET/#4-verify-installation","title":"4. Verify Installation","text":"<p>Run tests:</p> <pre><code>PYTHONPATH=src pytest -v\n</code></pre> <p>Expected output:</p> <pre><code>================ 15 passed in 0.04s ================\n</code></pre> <p>Run linting:</p> <pre><code>ruff check .\nblack --check src tests scripts\nmypy src\n</code></pre>"},{"location":"ENVIRONMENT_RESET/#5-reload-vscode","title":"5. Reload VSCode","text":"<p>In VSCode: 1. Press <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P</code> on Mac) 2. Type: \"Reload Window\" 3. Press Enter</p> <p>Or restart VSCode completely: - Close VSCode - Reopen the project folder</p>"},{"location":"ENVIRONMENT_RESET/#6-select-python-interpreter","title":"6. Select Python Interpreter","text":"<p>In VSCode: 1. Press <code>Ctrl+Shift+P</code> (or <code>Cmd+Shift+P</code> on Mac) 2. Type: \"Python: Select Interpreter\" 3. Choose the one showing <code>.venv</code> (e.g., <code>./venv/bin/python</code>)</p> <p>Verify interpreter: - Open a Python file - Check bottom-right corner of VSCode shows: <code>Python 3.x.x ('.venv': venv)</code></p>"},{"location":"ENVIRONMENT_RESET/#7-verify-vscode-features","title":"7. Verify VSCode Features","text":"<p>Test integrated terminal: 1. Open terminal in VSCode (<code>Ctrl+`</code>) 2. Verify virtual environment is activated (prompt shows <code>.venv</code> or <code>(venv)</code>) 3. Run: <code>python --version</code></p> <p>Test testing integration: 1. Open Testing panel (beaker icon in sidebar) 2. Click \"Refresh Tests\" 3. All 15 tests should appear 4. Run tests from panel</p> <p>Test formatting: 1. Open any Python file 2. Make a formatting change 3. Save file (<code>Ctrl+S</code>) 4. Verify Black auto-formats the file</p>"},{"location":"ENVIRONMENT_RESET/#cross-platform-compatibility","title":"Cross-Platform Compatibility","text":""},{"location":"ENVIRONMENT_RESET/#path-separators","title":"Path Separators","text":"<p>VSCode settings use forward slashes (<code>/</code>) which work on all platforms:</p> <pre><code>\"python.defaultInterpreterPath\": \"${workspaceFolder}/.venv/bin/python\"\n</code></pre> <p>On Windows, this automatically translates to:</p> <pre><code>C:\\path\\to\\project\\.venv\\Scripts\\python.exe\n</code></pre>"},{"location":"ENVIRONMENT_RESET/#pythonpath-configuration","title":"PYTHONPATH Configuration","text":"<p>The <code>.vscode/settings.json</code> sets PYTHONPATH for all platforms:</p> <pre><code>\"terminal.integrated.env.linux\": {\n  \"PYTHONPATH\": \"${workspaceFolder}/src\"\n},\n\"terminal.integrated.env.osx\": {\n  \"PYTHONPATH\": \"${workspaceFolder}/src\"\n},\n\"terminal.integrated.env.windows\": {\n  \"PYTHONPATH\": \"${workspaceFolder}/src\"\n}\n</code></pre>"},{"location":"ENVIRONMENT_RESET/#virtual-environment-activation","title":"Virtual Environment Activation","text":"<p>Windows: - PowerShell: <code>.\\.venv\\Scripts\\Activate.ps1</code> - Command Prompt: <code>.\\.venv\\Scripts\\activate.bat</code></p> <p>macOS/Linux: - Bash/Zsh: <code>source .venv/bin/activate</code></p>"},{"location":"ENVIRONMENT_RESET/#github-copilot-integration","title":"GitHub Copilot Integration","text":""},{"location":"ENVIRONMENT_RESET/#verify-copilot-extensions","title":"Verify Copilot Extensions","text":"<p>Required extensions: - <code>GitHub.copilot</code> - <code>GitHub.copilot-chat</code></p> <p>Check if installed: 1. Press <code>Ctrl+Shift+X</code> (Extensions panel) 2. Search for \"GitHub Copilot\" 3. Verify both extensions are installed and enabled</p>"},{"location":"ENVIRONMENT_RESET/#copilot-settings-in-vscode","title":"Copilot Settings in VSCode","text":"<p>The project includes Copilot-specific settings in <code>.vscode/settings.json</code>:</p> <pre><code>\"github.copilot.enable\": {\n  \"*\": true,\n  \"yaml\": true,\n  \"plaintext\": true,\n  \"markdown\": true,\n  \"python\": true\n},\n\"github.copilot.editor.enableAutoCompletions\": true\n</code></pre>"},{"location":"ENVIRONMENT_RESET/#copilot-instructions","title":"Copilot Instructions","text":"<p>The project includes <code>.github/copilot-instructions.md</code> which provides: - Project architecture overview - Code style guidelines - Testing conventions - Common patterns</p> <p>This helps Copilot provide better suggestions specific to this project.</p>"},{"location":"ENVIRONMENT_RESET/#test-copilot","title":"Test Copilot","text":"<ol> <li>Open a Python file</li> <li>Start typing a function</li> <li>Copilot should suggest completions (gray text)</li> <li>Press <code>Tab</code> to accept</li> </ol>"},{"location":"ENVIRONMENT_RESET/#troubleshooting","title":"Troubleshooting","text":""},{"location":"ENVIRONMENT_RESET/#issue-module-not-found-errors","title":"Issue: \"Module not found\" errors","text":"<p>Solution:</p> <pre><code># Verify PYTHONPATH includes src directory\necho $PYTHONPATH  # macOS/Linux\necho $env:PYTHONPATH  # Windows PowerShell\n\n# Should show: /path/to/project/src\n\n# If not set, reload VSCode or manually set:\nexport PYTHONPATH=\"${PWD}/src\"  # macOS/Linux\n$env:PYTHONPATH = \"${PWD}\\src\"  # Windows PowerShell\n</code></pre>"},{"location":"ENVIRONMENT_RESET/#issue-tests-not-discovered-in-vscode","title":"Issue: Tests not discovered in VSCode","text":"<p>Solution: 1. Open Command Palette (<code>Ctrl+Shift+P</code>) 2. Run: \"Python: Configure Tests\" 3. Select: \"pytest\" 4. Select: \"tests\" directory 5. Reload window</p>"},{"location":"ENVIRONMENT_RESET/#issue-formatter-not-working","title":"Issue: Formatter not working","text":"<p>Solution: 1. Verify Black is installed: <code>pip show black</code> 2. Install if missing: <code>pip install black</code> 3. Open Command Palette 4. Run: \"Format Document\" 5. Select: \"Black Formatter\" as default</p>"},{"location":"ENVIRONMENT_RESET/#issue-git-shows-unexpected-changes","title":"Issue: Git shows unexpected changes","text":"<p>Solution:</p> <pre><code># View what changed\ngit status\ngit diff\n\n# Discard changes to specific file\ngit checkout -- filename\n\n# Discard all local changes\ngit reset --hard HEAD\n</code></pre>"},{"location":"ENVIRONMENT_RESET/#issue-permission-denied-on-scripts","title":"Issue: Permission denied on scripts","text":"<p>macOS/Linux:</p> <pre><code>chmod +x scripts/*.py\n</code></pre>"},{"location":"ENVIRONMENT_RESET/#issue-import-completions-not-working","title":"Issue: Import completions not working","text":"<p>Solution: 1. Check Pylance is installed 2. Verify settings in <code>.vscode/settings.json</code>:    <code>json    \"python.languageServer\": \"Pylance\",    \"python.analysis.autoImportCompletions\": true</code> 3. Reload window</p>"},{"location":"ENVIRONMENT_RESET/#advanced-reset-complete-rebuild","title":"Advanced Reset (Complete Rebuild)","text":"<p>For severe issues, perform a complete reset:</p>"},{"location":"ENVIRONMENT_RESET/#1-backup-any-local-work","title":"1. Backup Any Local Work","text":"<pre><code># Backup uncommitted changes\ngit diff &gt; my-changes.patch\n\n# Backup entire folder\ncp -r /path/to/SynTechRev-PolyCodCal /path/to/backup\n</code></pre>"},{"location":"ENVIRONMENT_RESET/#2-delete-and-reclone","title":"2. Delete and Reclone","text":"<pre><code># Delete local repository\ncd ..\nrm -rf SynTechRev-PolyCodCal\n\n# Clone fresh from GitHub\ngit clone https://github.com/SynTechRev/SynTechRev-PolyCodCal.git\ncd SynTechRev-PolyCodCal\n</code></pre>"},{"location":"ENVIRONMENT_RESET/#3-follow-quick-setup","title":"3. Follow Quick Setup","text":"<p>Follow steps 3-7 from \"Quick Reset\" above.</p>"},{"location":"ENVIRONMENT_RESET/#4-reapply-your-changes","title":"4. Reapply Your Changes","text":"<pre><code># If you saved a patch\ngit apply my-changes.patch\n</code></pre>"},{"location":"ENVIRONMENT_RESET/#verification-checklist","title":"Verification Checklist","text":"<p>After reset, verify everything works:</p> <ul> <li>[ ] Virtual environment activates without errors</li> <li>[ ] <code>python --version</code> shows correct version (3.11+)</li> <li>[ ] <code>pytest -v</code> shows all 15 tests passing</li> <li>[ ] <code>black --check src tests scripts</code> shows no errors</li> <li>[ ] <code>ruff check .</code> shows no errors</li> <li>[ ] <code>mypy src</code> shows no errors</li> <li>[ ] VSCode shows correct Python interpreter in bottom-right</li> <li>[ ] VSCode Testing panel shows all 15 tests</li> <li>[ ] Auto-format on save works</li> <li>[ ] GitHub Copilot provides suggestions</li> <li>[ ] Import autocomplete works</li> <li>[ ] No git changes shown (unless you made intentional changes)</li> </ul>"},{"location":"ENVIRONMENT_RESET/#post-reset-best-practices","title":"Post-Reset Best Practices","text":""},{"location":"ENVIRONMENT_RESET/#keep-environment-clean","title":"Keep Environment Clean","text":"<p>Don't commit: - Virtual environment files (<code>.venv/</code>, <code>venv/</code>) - Python cache (<code>__pycache__/</code>, <code>*.pyc</code>) - Test cache (<code>.pytest_cache/</code>, <code>.coverage</code>) - IDE-specific files (<code>.idea/</code>, user-specific VSCode files)</p> <p>Do commit: - Source code (<code>src/</code>, <code>tests/</code>, <code>scripts/</code>) - Configuration (<code>.vscode/</code> workspace settings, <code>.pre-commit-config.yaml</code>) - Documentation (<code>docs/</code>, <code>README.md</code>, etc.) - Dependencies (<code>requirements.txt</code>, <code>dev-requirements.txt</code>)</p>"},{"location":"ENVIRONMENT_RESET/#regular-maintenance","title":"Regular Maintenance","text":"<p>Weekly:</p> <pre><code># Update dependencies\npip install --upgrade pip\npip install --upgrade -r dev-requirements.txt\n\n# Clean cache\nfind . -type d -name \"__pycache__\" -exec rm -rf {} + 2&gt;/dev/null\n</code></pre> <p>Before starting new work:</p> <pre><code>git checkout main\ngit pull origin main\ngit checkout -b feature/my-new-feature\n</code></pre> <p>After completing work:</p> <pre><code># Run all checks\nblack src tests scripts\nruff check .\nmypy src\npytest -v\n\n# Commit and push\ngit add .\ngit commit -m \"feat: description of changes\"\ngit push origin feature/my-new-feature\n</code></pre>"},{"location":"ENVIRONMENT_RESET/#integration-with-pr-5","title":"Integration with PR #5","text":"<p>PR #5 introduced comprehensive documentation and VSCode configuration. After reset, you'll have:</p> <ul> <li>Documentation: Guides in <code>docs/</code>, <code>QUICKSTART.md</code>, <code>CONTRIBUTING.md</code>, etc.</li> <li>VSCode Config: Optimized settings in <code>.vscode/</code></li> <li>Quality Tools: Pre-configured linters, formatters, type checkers</li> <li>Testing: Integrated pytest with coverage</li> <li>Copilot: Project-specific instructions</li> </ul> <p>This reset ensures your local environment matches these configurations.</p>"},{"location":"ENVIRONMENT_RESET/#need-help","title":"Need Help?","text":"<p>If issues persist after following this guide:</p> <ol> <li>Check existing documentation:</li> <li><code>QUICKSTART.md</code> - Basic setup</li> <li><code>CONTRIBUTING.md</code> - Development workflow</li> <li><code>docs/DEVELOPMENT_WORKFLOW.md</code> - Detailed processes</li> <li> <p><code>.vscode/README.md</code> - VSCode-specific help</p> </li> <li> <p>Review recent changes:</p> </li> <li>Check PR #5 for comprehensive setup details</li> <li> <p>Review commit messages for recent updates</p> </li> <li> <p>Get support:</p> </li> <li>Open an issue on GitHub</li> <li>Include error messages and steps tried</li> <li>Mention you followed this reset guide</li> </ol>"},{"location":"ENVIRONMENT_RESET/#summary","title":"Summary","text":"<p>This reset process ensures: - Clean virtual environment matching project requirements - VSCode properly configured for Python development - All tests passing and quality checks working - GitHub integration functioning correctly - Cross-platform compatibility maintained - GitHub Copilot providing project-specific assistance</p> <p>Follow the Quick Reset for most issues. Use Advanced Reset only if problems persist after quick reset.</p>"},{"location":"PHASE6_INGESTION/","title":"Phase 6 Ingestion Guide","text":"<p>This guide explains how to ingest legal data (Supreme Court cases, U.S. Code) into the Phase 6 scaffold, and how to handle proprietary works (e.g., Black's Law Dictionary, American Jurisprudence) safely and legally.</p>"},{"location":"PHASE6_INGESTION/#licensing-content-policy","title":"\u2696\ufe0f Licensing &amp; Content Policy","text":"<ul> <li>Supreme Court opinions and U.S. Code are generally public domain. Verify source terms.</li> <li>Black's Law Dictionary (5th ed.) and American Jurisprudence are proprietary. Only ingest if you have a valid license. Do NOT commit proprietary content to the repository.</li> <li>This repo provides tooling to ingest from your local, licensed copies. It does not distribute copyrighted content.</li> </ul>"},{"location":"PHASE6_INGESTION/#directory-layout","title":"\ud83d\udcc2 Directory Layout","text":"<pre><code>data/\n  cases/            # normalized JSON case records (used by current pipeline)\n  vectors/          # generated embedding arrays (.npy)\n  sources/          # raw source materials (not committed)\n    scotus/         # SCOTUS opinions (JSON/TXT/XML as obtained)\n    uscode/         # U.S. Code bulk titles (TXT/XML)\n    private/        # proprietary sources (Black's, AmJur) \u2014 keep local only\n</code></pre> <p>Add a .gitignore entry to exclude <code>data/sources/**</code> if not already ignored.</p>"},{"location":"PHASE6_INGESTION/#record-schema-normalized","title":"\ud83e\uddf1 Record Schema (normalized)","text":"<p>The ingest pipeline expects normalized JSON files under <code>data/cases/*.json</code> with at least:</p> <pre><code>{\n  \"case_name\": \"Case Title or Document Name\",\n  \"summary\": \"Main text (opinion/section/definition or concise summary)\",\n  \"source\": \"scotus|uscode|blackslaw|amjur|custom\",\n  \"citation\": \"optional\",\n  \"date\": \"optional (YYYY-MM-DD)\",\n  \"jurisdiction\": \"optional\"\n}\n</code></pre> <p>Minimal records work \u2014 the pipeline uses <code>summary</code> first, falling back to other fields, finally <code>case_name</code>.</p>"},{"location":"PHASE6_INGESTION/#ingestion-paths","title":"\ud83d\udee0\ufe0f Ingestion Paths","text":"<p>1) Supreme Court cases (public domain) - Obtain bulk downloads from reputable sources (e.g., official repositories or licensed providers). - Convert to normalized JSON and place in <code>data/cases/</code>.</p> <p>2) U.S. Code (public domain) - Obtain bulk titles (TXT or XML) from official sources (e.g., uscode.house.gov or govinfo.gov). - Convert to normalized JSON files per title/section and place in <code>data/cases/</code>.</p> <p>3) Proprietary sources (licensed) - Black's Law Dictionary (5th ed.) and American Jurisprudence: prepare normalized JSON locally. - Place the files under <code>data/sources/private/</code> while transforming; do NOT commit these files. - After normalization, place only the normalized JSON in <code>data/cases/</code> locally; keep it out of version control if it contains copyrighted text.</p>"},{"location":"PHASE6_INGESTION/#running-the-pipeline","title":"\ud83d\ude80 Running the Pipeline","text":"<pre><code>python -m syntechrev_polycodcal.legal_generator.cli ingest\n</code></pre>"},{"location":"PHASE6_INGESTION/#normalize-quickstart-scotus-adapter","title":"Normalize Quickstart (SCOTUS Adapter)","text":"<p>You can now normalize upstream datasets into the project schema with a built-in adapter:</p> <pre><code># SCOTUS-like JSONL/JSON -&gt; normalized case JSON files\nPYTHONPATH=src python -m syntechrev_polycodcal.legal_generator.cli normalize --adapter scotus --source path/to/scotus.jsonl --out data/cases\n\n# Ingest and build vectors\nPYTHONPATH=src python -m syntechrev_polycodcal.legal_generator.cli ingest\n\n# Query\nPYTHONPATH=src python -m syntechrev_polycodcal.legal_generator.cli query --text \"equal protection\"\n</code></pre> <p>Notes: - <code>--source</code> accepts <code>.jsonl</code> (one JSON per line) or <code>.json</code> (list or single object). - <code>--out</code> defaults to <code>data/cases</code> if omitted. - The adapter maps flexible fields like <code>title</code>/<code>name</code> to <code>case_name</code> and <code>syllabus</code>/<code>headnote</code> to <code>summary</code>.</p>"},{"location":"PHASE6_INGESTION/#normalize-us-code","title":"Normalize U.S. Code","text":""},{"location":"PHASE6_INGESTION/#normalize-proprietary-sources-local-only","title":"Normalize Proprietary Sources (Local Only)","text":"<p>Examples (do not commit proprietary text):</p> <pre><code># Black's Law Dictionary\npython -m syntechrev_polycodcal.legal_generator.cli normalize --adapter blacks --source data\\sources\\private\\blacks.json --out data\\cases --source-tag blacks\n\n# American Jurisprudence\npython -m syntechrev_polycodcal.legal_generator.cli normalize --adapter amjur --source data\\sources\\private\\amjur.jsonl --out data\\cases --source-tag amjur\n</code></pre> <p>Then ingest and query as usual.</p> <pre><code># JSON list of objects with fields like: title, section, heading, text\nPYTHONPATH=src python -m syntechrev_polycodcal.legal_generator.cli normalize --adapter uscode --source path/to/uscode.json --out data/cases\n\nPYTHONPATH=src python -m syntechrev_polycodcal.legal_generator.cli ingest\nPYTHONPATH=src python -m syntechrev_polycodcal.legal_generator.cli query --text \"civil rights action\"\n</code></pre> <ul> <li>Query:</li> </ul> <pre><code>python -m syntechrev_polycodcal.legal_generator.cli query --text \"due process violation\" --top-k 5\n</code></pre>"},{"location":"PHASE6_INGESTION/#verifying-locally","title":"\ud83e\uddea Verifying Locally","text":"<ul> <li>Add 1\u20132 JSON files under <code>data/cases/</code> with a <code>case_name</code> and <code>summary</code>.</li> <li>Run <code>ingest</code>, then <code>query</code> with relevant phrases; expect your cases to appear with highest similarity.</li> </ul>"},{"location":"PHASE6_INGESTION/#custom-importers-advanced","title":"\ud83d\udd04 Custom Importers (Advanced)","text":"<p>You can build source-specific importers that read from <code>data/sources/&lt;source&gt;</code> and output normalized JSON under <code>data/cases/</code>. Keep proprietary materials local and out of git.</p> <ul> <li>Example pattern:</li> <li><code>sources/scotus/*.json|*.xml</code> \u2192 normalize \u2192 <code>data/cases/CaseName.json</code></li> <li><code>sources/uscode/TitleXX/*.xml|*.txt</code> \u2192 normalize sections \u2192 <code>data/cases/USC_TitleXX_SecYYY.json</code></li> <li><code>sources/private/</code> \u2192 normalize locally \u2192 output not committed</li> </ul>"},{"location":"PHASE6_INGESTION/#best-practices","title":"\u2705 Best Practices","text":"<ul> <li>Keep raw sources in <code>data/sources/</code> and out of version control.</li> <li>Normalize to <code>data/cases/</code> using the minimal schema above.</li> <li>Re-run <code>ingest</code> whenever you add/update cases.</li> <li>Be mindful of copyright; when in doubt, don\u2019t commit the content.</li> </ul> <p>For help building a specific importer (e.g., US Code XML \u2192 JSON), open an issue or ask for an adapter targeting your source format.</p>"},{"location":"PHASE6_INGESTION/#troubleshooting-windows-python-313","title":"\ud83d\udee0\ufe0f Troubleshooting (Windows / Python 3.13)","text":"<p>If you see a NumPy import error on Windows with Python 3.13 like:</p> <pre><code>ImportError: DLL load failed while importing _multiarray_umath\n</code></pre> <p>This is an environment issue related to native NumPy wheels. Recommended options:</p> <ul> <li>Prefer Python 3.12 for local development (fastest path to green locally).</li> <li>Or ensure a compatible NumPy wheel is installed for Python 3.13 in your venv.</li> </ul> <p>Notes: - This is not a repository code bug; CI should remain green on supported versions. - After switching interpreters, recreate your venv and reinstall dependencies.</p> <p>Quick check (PowerShell):</p> <pre><code># Select a Python 3.12 interpreter in VS Code, then recreate venv\nRemove-Item -Recurse -Force .venv\npy -3.12 -m venv .venv\n&amp; .\\.venv\\Scripts\\Activate.ps1\npip install -r dev-requirements.txt\npytest -v\n</code></pre>"},{"location":"VSCODE_TAGGING/","title":"VS Code Tagging Quick Reference","text":"<p>This guide addresses common issues when creating release tags from VS Code terminal.</p>"},{"location":"VSCODE_TAGGING/#quick-start-recommended","title":"Quick Start (Recommended)","text":"<p>If you're in VS Code and want to tag a release, use the automated script:</p> <pre><code>./scripts/create_release_tag.sh v0.1.0 \"Release v0.1.0 - Initial stable release\"\n</code></pre> <p>This handles all the edge cases automatically.</p>"},{"location":"VSCODE_TAGGING/#common-vs-code-issues-and-solutions","title":"Common VS Code Issues and Solutions","text":""},{"location":"VSCODE_TAGGING/#issue-1-git-stash-push-u-m-message-fails","title":"Issue 1: <code>git stash push -u -m \"message\"</code> fails","text":"<p>Error:</p> <pre><code>No local changes to save\n</code></pre> <p>Why it happens: - Your working directory is already clean - <code>git stash</code> only works when there are uncommitted changes - This is actually a good thing - you're ready to tag!</p> <p>Solution:</p> <pre><code># Check if you have changes first\ngit status -s\n\n# Only stash if the output is not empty\nif [[ -n $(git status -s) ]]; then\n    git stash push -u -m \"pre-tag cleanup\"\nelse\n    echo \"No changes to stash - proceeding to tag\"\nfi\n\n# Or just skip stashing if working tree is clean\n</code></pre>"},{"location":"VSCODE_TAGGING/#issue-2-git-pull-ff-only-fails","title":"Issue 2: <code>git pull --ff-only</code> fails","text":"<p>Error:</p> <pre><code>fatal: couldn't find remote ref main\n# or\nAuthentication failed\n</code></pre> <p>Why it happens: 1. Branch doesn't exist: The <code>main</code> branch might not exist locally or remotely 2. Authentication: VS Code needs credentials configured for HTTPS, or SSH keys for SSH URLs 3. Detached HEAD: You might be on a specific commit, not a branch</p> <p>Solutions:</p>"},{"location":"VSCODE_TAGGING/#solution-a-check-what-branches-exist","title":"Solution A: Check what branches exist","text":"<pre><code># See all branches\ngit branch -a\n\n# Check current branch/commit\ngit branch --show-current\ngit log --oneline -1\n</code></pre>"},{"location":"VSCODE_TAGGING/#solution-b-skip-pulling-if-on-feature-branch","title":"Solution B: Skip pulling if on feature branch","text":"<p>If you're on a feature branch like <code>copilot/cleanup-and-tag-phase-5</code>, you can tag directly:</p> <pre><code># You don't need to switch to main\n# Just tag where you are\ngit tag -a v0.1.0 -m \"Release v0.1.0\"\ngit push origin v0.1.0\n</code></pre>"},{"location":"VSCODE_TAGGING/#solution-c-fix-authentication","title":"Solution C: Fix authentication","text":"<p>For HTTPS (requires token or credentials):</p> <pre><code># Check remote URL\ngit remote -v\n\n# If using HTTPS, you may need to configure credentials\n# In VS Code, this is usually handled by the Git extension\n# Make sure you're signed into GitHub in VS Code\n</code></pre> <p>For SSH (requires SSH keys):</p> <pre><code># Check if SSH keys are set up\nssh -T git@github.com\n\n# If not, switch remote to SSH\ngit remote set-url origin git@github.com:SynTechRev/SynTechRev-PolyCodCal.git\n</code></pre>"},{"location":"VSCODE_TAGGING/#issue-3-git-clean-xdf-too-aggressive","title":"Issue 3: <code>git clean -xdf</code> too aggressive","text":"<p>Problem: This command removes ALL untracked files, including: - Local configuration files - IDE settings you want to keep - Downloaded data files - Anything not in <code>.gitignore</code> and not committed</p> <p>Solution: Use the safer cleanup script instead:</p> <pre><code># Safe cleanup - only removes build artifacts\n./scripts/cleanup_repo.sh\n</code></pre> <p>Or clean specific types manually:</p> <pre><code># Python cache only\nfind . -type d -name \"__pycache__\" -exec rm -rf {} + 2&gt;/dev/null || true\n\n# Test artifacts only  \nrm -rf .pytest_cache htmlcov .coverage\n\n# Linter cache only\nrm -rf .mypy_cache .ruff_cache\n</code></pre>"},{"location":"VSCODE_TAGGING/#issue-4-gitindexlock-file-exists","title":"Issue 4: <code>.git/index.lock</code> file exists","text":"<p>Error:</p> <pre><code>fatal: Unable to create '.git/index.lock': File exists\n</code></pre> <p>Why it happens: - A previous git operation was interrupted - Another git process is running - VS Code Git extension might be refreshing</p> <p>Solution:</p> <pre><code># Make sure no git operations are running\nps aux | grep git\n\n# Remove the lock file (ONLY if no git processes are running!)\nrm -f .git/index.lock\n\n# Now try your git command again\n</code></pre>"},{"location":"VSCODE_TAGGING/#recommended-vs-code-workflow","title":"Recommended VS Code Workflow","text":""},{"location":"VSCODE_TAGGING/#method-1-using-the-automation-script-easiest","title":"Method 1: Using the Automation Script (Easiest)","text":"<pre><code># 1. Open integrated terminal in VS Code (Ctrl+`)\ncd /home/runner/work/SynTechRev-PolyCodCal/SynTechRev-PolyCodCal\n\n# 2. Run the tag script\n./scripts/create_release_tag.sh v0.1.0 \"Release v0.1.0\"\n\n# 3. Follow the prompts\n# - Script checks for issues\n# - Cleans artifacts\n# - Creates tag\n# - Offers to push\n</code></pre>"},{"location":"VSCODE_TAGGING/#method-2-manual-steps-more-control","title":"Method 2: Manual Steps (More Control)","text":"<pre><code># 1. Check current state\ngit status\ngit log --oneline -5\n\n# 2. Clean artifacts (safe)\n./scripts/cleanup_repo.sh\n\n# 3. Create tag\ngit tag -a v0.1.0 -m \"Release v0.1.0\n\n- Comprehensive documentation\n- Code repair strategy\n- VS Code integration\n- 100% test coverage\n\"\n\n# 4. Verify tag\ngit tag -l\ngit show v0.1.0\n\n# 5. Push tag\ngit push origin v0.1.0\n</code></pre>"},{"location":"VSCODE_TAGGING/#vs-code-git-integration","title":"VS Code Git Integration","text":""},{"location":"VSCODE_TAGGING/#using-vs-code-source-control-panel","title":"Using VS Code Source Control Panel","text":"<ol> <li>Create Tag:</li> <li>Click Source Control icon (Ctrl+Shift+G)</li> <li>Click \"...\" menu \u2192 \"Tags\" \u2192 \"Create Tag\"</li> <li>Enter tag name: <code>v0.1.0</code></li> <li>Enter message</li> <li> <p>Note: VS Code creates lightweight tags by default, use terminal for annotated tags</p> </li> <li> <p>Push Tag:</p> </li> <li>After creating tag via Source Control</li> <li>Open terminal and run: <code>git push origin v0.1.0</code></li> <li> <p>Or use Command Palette (Ctrl+Shift+P) \u2192 \"Git: Push Tags\"</p> </li> <li> <p>View Tags:</p> </li> <li>Source Control \"...\" menu \u2192 \"Tags\" \u2192 \"View Tags\"</li> </ol>"},{"location":"VSCODE_TAGGING/#authentication-in-vs-code","title":"Authentication in VS Code","text":"<p>VS Code uses different authentication methods:</p> <ol> <li>GitHub Authentication:</li> <li>Click Account icon (bottom left)</li> <li>Sign in with GitHub</li> <li> <p>Grants access to repos</p> </li> <li> <p>Git Credential Manager:</p> </li> <li>Handles HTTPS authentication</li> <li>Prompts when needed</li> <li> <p>Stores credentials securely</p> </li> <li> <p>SSH Keys:</p> </li> <li>VS Code uses your system SSH keys</li> <li>Set up SSH keys: GitHub SSH docs</li> </ol>"},{"location":"VSCODE_TAGGING/#troubleshooting-checklist","title":"Troubleshooting Checklist","text":"<p>Before tagging, verify:</p> <ul> <li>[ ] Working directory is clean: <code>git status</code></li> <li>[ ] You're on the right commit: <code>git log -1</code></li> <li>[ ] CHANGELOG.md is updated with the version</li> <li>[ ] All tests pass (if you can run them)</li> <li>[ ] No <code>.git/index.lock</code> file exists</li> <li>[ ] You're authenticated to GitHub in VS Code</li> </ul>"},{"location":"VSCODE_TAGGING/#when-to-tag-from-feature-branch-vs-main","title":"When to Tag from Feature Branch vs Main","text":""},{"location":"VSCODE_TAGGING/#tag-from-feature-branch-when","title":"Tag from Feature Branch When:","text":"<ul> <li>You're in CI/CD environment</li> <li>Main branch doesn't exist locally</li> <li>You're completing a specific phase of work</li> <li>The feature branch IS ready for release</li> </ul>"},{"location":"VSCODE_TAGGING/#tag-from-main-branch-when","title":"Tag from Main Branch When:","text":"<ul> <li>Main branch exists and is up to date</li> <li>Following traditional release workflow</li> <li>Multiple features are being released together</li> </ul> <p>For this project: Since you're on <code>copilot/cleanup-and-tag-phase-5</code> and it represents the state you want to release, it's fine to tag directly from this branch. After tagging, merge the branch to main (or make main point to this commit).</p>"},{"location":"VSCODE_TAGGING/#example-complete-vs-code-tagging-session","title":"Example: Complete VS Code Tagging Session","text":"<pre><code># Step 1: Check where you are\ngit status\n# Output: On branch copilot/cleanup-and-tag-phase-5\n# Output: nothing to commit, working tree clean\n# \u2713 Good - working tree is clean, no need to stash\n\n# Step 2: Check branches\ngit branch -a\n# Output: * copilot/cleanup-and-tag-phase-5\n# Note: Main branch doesn't exist locally, that's OK\n\n# Step 3: Clean artifacts\n./scripts/cleanup_repo.sh\n# \u2713 Removes build files safely\n\n# Step 4: Create tag\ngit tag -a v0.1.0 -m \"Release v0.1.0 - Phase 1 complete\"\n# \u2713 Tag created\n\n# Step 5: Verify\ngit show v0.1.0\n# Shows tag details\n\n# Step 6: Push\ngit push origin v0.1.0\n# \u2713 Tag pushed to GitHub\n\n# Step 7: Create GitHub Release\n# Go to: https://github.com/SynTechRev/SynTechRev-PolyCodCal/releases/new\n# Select tag: v0.1.0\n# Add release notes from CHANGELOG.md\n# Publish!\n</code></pre>"},{"location":"VSCODE_TAGGING/#what-not-to-do","title":"What NOT to Do","text":"<p>\u274c Don't use <code>git clean -xdf</code> without understanding what it removes \u274c Don't force-stash when working tree is clean \u274c Don't delete <code>.git/index.lock</code> while git operations are running \u274c Don't create tags with secrets or credentials in commit history \u274c Don't tag without updating CHANGELOG.md \u274c Don't delete remote tags that others might be using</p>"},{"location":"VSCODE_TAGGING/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the full TAGGING_GUIDE.md for detailed explanations</li> <li>Run <code>./scripts/create_release_tag.sh</code> for automated handling</li> <li>Verify authentication: <code>git remote -v</code> and sign in to GitHub in VS Code</li> <li>Check for lock files: <code>ls -la .git/ | grep lock</code></li> <li>Review git status: <code>git status -vv</code></li> </ol>"},{"location":"VSCODE_TAGGING/#summary","title":"Summary","text":"<p>The commands that gave you trouble:</p> <pre><code># \u274c This fails if working tree is clean (good state!)\ngit stash push -u -m \"pre-tag cleanup before switching to main\"\n\n# \u274c This fails if main branch doesn't exist or auth issues\ngit pull --ff-only\n\n# \u274c This is too aggressive and removes everything untracked\ngit clean -xdf\n</code></pre> <p>Instead, use:</p> <pre><code># \u2705 Simple and works from any branch\n./scripts/create_release_tag.sh v0.1.0 \"Release v0.1.0\"\n\n# Or manually:\n./scripts/cleanup_repo.sh              # Safe cleanup\ngit tag -a v0.1.0 -m \"Release v0.1.0\"  # Create tag\ngit push origin v0.1.0                  # Push tag\n</code></pre> <p>That's it! No need to switch branches, stash changes, or pull from remote.</p>"}]}